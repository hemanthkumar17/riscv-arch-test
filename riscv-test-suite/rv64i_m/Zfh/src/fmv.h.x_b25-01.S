
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.0
// timestamp : Mon Feb 14 07:47:35 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/zeusprime/riscv-project/riscof_zfh_env/tests/ctg_test/dataset.cgf \
//                  --cgf /home/zeusprime/riscv-project/riscof_zfh_env/tests/ctg_test/rv64f_zfhfull.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmv.h.x instruction of the RISC-V RV64FZfh extension for the fmv.h.x_b25 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IFZfh")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*F.*Zfh.*);def TEST_CASE_1=True;",fmv.h.x_b25)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:// rs1==x2, rd==f1, rs1_val == 0 and rm_val == 0  
// opcode: fmv.h.x ; op1:x2; dest:f1; op1val:0x0; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.h.x, f1, x2, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:// rs1==x9, rd==f15, rs1_val == -18723 and rm_val == 0  
// opcode: fmv.h.x ; op1:x9; dest:f15; op1val:-0x4923; valaddr_reg:x16; val_offset:2; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.h.x, f15, x9, 0x0, 0, x16, 2, x17, x15, 10, x18)
RVTEST_VALBASEMOV(x20, x16)
RVTEST_SIGBASE(x19,signature_x19_0)

inst_2:// rs1==x17, rd==f14, rs1_val == 18723 and rm_val == 0  
// opcode: fmv.h.x ; op1:x17; dest:f14; op1val:0x4923; valaddr_reg:x20; val_offset:4; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.h.x, f14, x17, 0x0, 0, x20, 4, x21, x19, 0, x18)
RVTEST_VALBASEMOV(x16, x20)
RVTEST_SIGBASE(x15,signature_x15_2)

inst_3:// rs1==x22, rd==f17, rs1_val == -32767 and rm_val == 0  
// opcode: fmv.h.x ; op1:x22; dest:f17; op1val:-0x7fff; valaddr_reg:x16; val_offset:6; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.h.x, f17, x22, 0x0, 0, x16, 6, x17, x15, 0, x18)

inst_4:// rs1==x1, rd==f10, rs1_val == 32767 and rm_val == 0  
// opcode: fmv.h.x ; op1:x1; dest:f10; op1val:0x7fff; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.h.x, f10, x1, 0x0, 0, x16, 8, x17, x15, 10, x18)

inst_5:// rs1==x27, rd==f5, rs1_val == -1 and rm_val == 0  
// opcode: fmv.h.x ; op1:x27; dest:f5; op1val:-0x1; valaddr_reg:x16; val_offset:10; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.h.x, f5, x27, 0x0, 0, x16, 10, x17, x15, 20, x18)
RVTEST_VALBASEMOV(x20, x16)
RVTEST_SIGBASE(x19,signature_x19_1)

inst_6:// rs1==x15, rd==f6, rs1_val == 1 and rm_val == 0  
// opcode: fmv.h.x ; op1:x15; dest:f6; op1val:0x1; valaddr_reg:x20; val_offset:12; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.h.x, f6, x15, 0x0, 0, x20, 12, x21, x19, 0, x18)
RVTEST_VALBASEMOV(x16, x20)
RVTEST_SIGBASE(x15,signature_x15_3)

inst_7:// rs1==x31, rd==f20, 
// opcode: fmv.h.x ; op1:x31; dest:f20; op1val:0x0; valaddr_reg:x16; val_offset:14; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.h.x, f20, x31, 0x0, 0, x16, 14, x17, x15, 0, x18)

inst_8:// rs1==x8, rd==f3, 
// opcode: fmv.h.x ; op1:x8; dest:f3; op1val:0x0; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.h.x, f3, x8, 0x0, 0, x16, 16, x17, x15, 10, x18)

inst_9:// rs1==x21, rd==f7, 
// opcode: fmv.h.x ; op1:x21; dest:f7; op1val:0x0; valaddr_reg:x16; val_offset:18; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.h.x, f7, x21, 0x0, 0, x16, 18, x17, x15, 20, x18)

inst_10:// rs1==x23, rd==f4, 
// opcode: fmv.h.x ; op1:x23; dest:f4; op1val:0x0; valaddr_reg:x16; val_offset:20; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.h.x, f4, x23, 0x0, 0, x16, 20, x17, x15, 30, x18)

inst_11:// rs1==x3, rd==f18, 
// opcode: fmv.h.x ; op1:x3; dest:f18; op1val:0x0; valaddr_reg:x16; val_offset:22; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.h.x, f18, x3, 0x0, 0, x16, 22, x17, x15, 40, x18)

inst_12:// rs1==x24, rd==f29, 
// opcode: fmv.h.x ; op1:x24; dest:f29; op1val:0x0; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.h.x, f29, x24, 0x0, 0, x16, 24, x17, x15, 50, x18)

inst_13:// rs1==x26, rd==f30, 
// opcode: fmv.h.x ; op1:x26; dest:f30; op1val:0x0; valaddr_reg:x16; val_offset:26; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.h.x, f30, x26, 0x0, 0, x16, 26, x17, x15, 60, x18)

inst_14:// rs1==x6, rd==f16, 
// opcode: fmv.h.x ; op1:x6; dest:f16; op1val:0x0; valaddr_reg:x16; val_offset:28; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.h.x, f16, x6, 0x0, 0, x16, 28, x17, x15, 70, x18)

inst_15:// rs1==x5, rd==f23, 
// opcode: fmv.h.x ; op1:x5; dest:f23; op1val:0x0; valaddr_reg:x16; val_offset:30; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.h.x, f23, x5, 0x0, 0, x16, 30, x17, x15, 80, x18)

inst_16:// rs1==x10, rd==f13, 
// opcode: fmv.h.x ; op1:x10; dest:f13; op1val:0x0; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.h.x, f13, x10, 0x0, 0, x16, 32, x17, x15, 90, x18)

inst_17:// rs1==x11, rd==f8, 
// opcode: fmv.h.x ; op1:x11; dest:f8; op1val:0x0; valaddr_reg:x16; val_offset:34; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.h.x, f8, x11, 0x0, 0, x16, 34, x17, x15, 100, x18)

inst_18:// rs1==x28, rd==f2, 
// opcode: fmv.h.x ; op1:x28; dest:f2; op1val:0x0; valaddr_reg:x16; val_offset:36; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.h.x, f2, x28, 0x0, 0, x16, 36, x17, x15, 110, x18)

inst_19:// rs1==x13, rd==f27, 
// opcode: fmv.h.x ; op1:x13; dest:f27; op1val:0x0; valaddr_reg:x16; val_offset:38; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.h.x, f27, x13, 0x0, 0, x16, 38, x17, x15, 120, x18)

inst_20:// rs1==x7, rd==f0, 
// opcode: fmv.h.x ; op1:x7; dest:f0; op1val:0x0; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.h.x, f0, x7, 0x0, 0, x16, 40, x17, x15, 130, x18)

inst_21:// rs1==x20, rd==f21, 
// opcode: fmv.h.x ; op1:x20; dest:f21; op1val:0x0; valaddr_reg:x16; val_offset:42; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.h.x, f21, x20, 0x0, 0, x16, 42, x17, x15, 140, x18)
RVTEST_VALBASEMOV(x20, x16)
RVTEST_SIGBASE(x19,signature_x19_2)

inst_22:// rs1==x16, rd==f12, 
// opcode: fmv.h.x ; op1:x16; dest:f12; op1val:0x0; valaddr_reg:x20; val_offset:44; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.h.x, f12, x16, 0x0, 0, x20, 44, x21, x19, 0, x18)
RVTEST_VALBASEMOV(x16, x20)
RVTEST_SIGBASE(x15,signature_x15_4)

inst_23:// rs1==x12, rd==f19, 
// opcode: fmv.h.x ; op1:x12; dest:f19; op1val:0x0; valaddr_reg:x16; val_offset:46; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.h.x, f19, x12, 0x0, 0, x16, 46, x17, x15, 0, x18)

inst_24:// rs1==x25, rd==f9, 
// opcode: fmv.h.x ; op1:x25; dest:f9; op1val:0x0; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.h.x, f9, x25, 0x0, 0, x16, 48, x17, x15, 10, x18)

inst_25:// rs1==x30, rd==f28, 
// opcode: fmv.h.x ; op1:x30; dest:f28; op1val:0x0; valaddr_reg:x16; val_offset:50; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.h.x, f28, x30, 0x0, 0, x16, 50, x17, x15, 20, x18)

inst_26:// rs1==x0, rd==f24, 
// opcode: fmv.h.x ; op1:x0; dest:f24; op1val:0x0; valaddr_reg:x16; val_offset:52; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.h.x, f24, x0, 0x0, 0, x16, 52, x17, x15, 30, x18)

inst_27:// rs1==x14, rd==f22, 
// opcode: fmv.h.x ; op1:x14; dest:f22; op1val:0x0; valaddr_reg:x16; val_offset:54; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.h.x, f22, x14, 0x0, 0, x16, 54, x17, x15, 40, x18)

inst_28:// rs1==x4, rd==f31, 
// opcode: fmv.h.x ; op1:x4; dest:f31; op1val:0x0; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.h.x, f31, x4, 0x0, 0, x16, 56, x17, x15, 50, x18)

inst_29:// rs1==x19, rd==f26, 
// opcode: fmv.h.x ; op1:x19; dest:f26; op1val:0x0; valaddr_reg:x16; val_offset:58; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.h.x, f26, x19, 0x0, 0, x16, 58, x17, x15, 60, x18)

inst_30:// rs1==x29, rd==f11, 
// opcode: fmv.h.x ; op1:x29; dest:f11; op1val:0x0; valaddr_reg:x16; val_offset:60; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.h.x, f11, x29, 0x0, 0, x16, 60, x17, x15, 70, x18)

inst_31:// rs1==x18, rd==f25, 
// opcode: fmv.h.x ; op1:x18; dest:f25; op1val:0x0; valaddr_reg:x16; val_offset:62; rmval:0x0; correctval:0; testreg:x22
TEST_FPIO_OP(fmv.h.x, f25, x18, 0x0, 0, x16, 62, x17, x15, 80, x22)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_fp:
.hword 0x0
.hword -0x4923
.hword 0x4923
.hword -0x7fff
.hword 0x7fff
.hword -0x1
.hword 0x1
.hword 0x0
.hword 0x0
.hword 0x0
.hword 0x0
.hword 0x0
.hword 0x0
.hword 0x0
.hword 0x0
.hword 0x0
.hword 0x0
.hword 0x0
.hword 0x0
.hword 0x0
.hword 0x0
.hword 0x0
.hword 0x0
.hword 0x0
.hword 0x0
.hword 0x0
.hword 0x0
.hword 0x0
.hword 0x0
.hword 0x0
.hword 0x0
.hword 0x0
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 4*(XLEN/32),4,0xdeadbeef


signature_x19_0:
    .fill 2*(XLEN/32),4,0xdeadbeef


signature_x15_2:
    .fill 6*(XLEN/32),4,0xdeadbeef


signature_x19_1:
    .fill 2*(XLEN/32),4,0xdeadbeef


signature_x15_3:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x19_2:
    .fill 2*(XLEN/32),4,0xdeadbeef


signature_x15_4:
    .fill 18*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
