
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.0
// timestamp : Mon Feb 14 07:47:35 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/zeusprime/riscv-project/riscof_zfh_env/tests/ctg_test/dataset.cgf \
//                  --cgf /home/zeusprime/riscv-project/riscof_zfh_env/tests/ctg_test/rv64f_zfhfull.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the flh instruction of the RISC-V RV64FZfh extension for the flh-align covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IFZfh")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*Zfh.*);def TEST_CASE_1=True;",flh-align)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:// rs1==x8, rd==f26, ea_align == 0 and (imm_val % 4) == 0, imm_val > 0
// opcode:flh op1:x8; dest:f26; immval:0x200; align:0; flagreg:$flag_reg
TEST_LOAD_F(x15,x18,0,x8,f26,0x200,0,flh,0,x17)
RVTEST_VALBASEUPD(x16)

inst_1:// rs1==x30, rd==f14, ea_align == 0 and (imm_val % 4) == 1, imm_val < 0
// opcode:flh op1:x30; dest:f14; immval:-0x7; align:0; flagreg:$flag_reg
TEST_LOAD_F(x15,x18,0,x30,f14,-0x7,10,flh,0,x17)
RVTEST_VALBASEUPD(x16)
RVTEST_VALBASEMOV(x20, x16)
RVTEST_SIGBASE(x19,signature_x19_0)

inst_2:// rs1==x17, rd==f7, ea_align == 0 and (imm_val % 4) == 2, 
// opcode:flh op1:x17; dest:f7; immval:-0xa; align:0; flagreg:$flag_reg
TEST_LOAD_F(x19,x18,0,x17,f7,-0xa,0,flh,0,x21)
RVTEST_VALBASEUPD(x20)
RVTEST_VALBASEMOV(x16, x20)
RVTEST_SIGBASE(x15,signature_x15_2)

inst_3:// rs1==x21, rd==f31, ea_align == 0 and (imm_val % 4) == 3, 
// opcode:flh op1:x21; dest:f31; immval:0x3; align:0; flagreg:$flag_reg
TEST_LOAD_F(x15,x18,0,x21,f31,0x3,0,flh,0,x17)
RVTEST_VALBASEUPD(x16)

inst_4:// rs1==x13, rd==f1, imm_val == 0, 
// opcode:flh op1:x13; dest:f1; immval:0x0; align:0; flagreg:$flag_reg
TEST_LOAD_F(x15,x18,0,x13,f1,0x0,10,flh,0,x17)
RVTEST_VALBASEUPD(x16)

inst_5:// rs1==x7, rd==f16, 
// opcode:flh op1:x7; dest:f16; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x15,x18,0,x7,f16,-0x800,20,flh,0,x17)
RVTEST_VALBASEUPD(x16)

inst_6:// rs1==x31, rd==f23, 
// opcode:flh op1:x31; dest:f23; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x15,x18,0,x31,f23,-0x800,30,flh,0,x17)
RVTEST_VALBASEUPD(x16)

inst_7:// rs1==x11, rd==f27, 
// opcode:flh op1:x11; dest:f27; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x15,x18,0,x11,f27,-0x800,40,flh,0,x17)
RVTEST_VALBASEUPD(x16)

inst_8:// rs1==x19, rd==f29, 
// opcode:flh op1:x19; dest:f29; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x15,x18,0,x19,f29,-0x800,50,flh,0,x17)
RVTEST_VALBASEUPD(x16)

inst_9:// rs1==x27, rd==f13, 
// opcode:flh op1:x27; dest:f13; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x15,x18,0,x27,f13,-0x800,60,flh,0,x17)
RVTEST_VALBASEUPD(x16)

inst_10:// rs1==x4, rd==f5, 
// opcode:flh op1:x4; dest:f5; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x15,x18,0,x4,f5,-0x800,70,flh,0,x17)
RVTEST_VALBASEUPD(x16)

inst_11:// rs1==x26, rd==f24, 
// opcode:flh op1:x26; dest:f24; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x15,x18,0,x26,f24,-0x800,80,flh,0,x17)
RVTEST_VALBASEUPD(x16)

inst_12:// rs1==x18, rd==f30, 
// opcode:flh op1:x18; dest:f30; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x15,x22,0,x18,f30,-0x800,90,flh,0,x17)
RVTEST_VALBASEUPD(x16)

inst_13:// rs1==x10, rd==f3, 
// opcode:flh op1:x10; dest:f3; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x15,x18,0,x10,f3,-0x800,100,flh,0,x17)
RVTEST_VALBASEUPD(x16)

inst_14:// rs1==x22, rd==f12, 
// opcode:flh op1:x22; dest:f12; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x15,x18,0,x22,f12,-0x800,110,flh,0,x17)
RVTEST_VALBASEUPD(x16)

inst_15:// rs1==x25, rd==f15, 
// opcode:flh op1:x25; dest:f15; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x15,x18,0,x25,f15,-0x800,120,flh,0,x17)
RVTEST_VALBASEUPD(x16)

inst_16:// rs1==x29, rd==f6, 
// opcode:flh op1:x29; dest:f6; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x15,x18,0,x29,f6,-0x800,130,flh,0,x17)
RVTEST_VALBASEUPD(x16)

inst_17:// rs1==x14, rd==f10, 
// opcode:flh op1:x14; dest:f10; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x15,x18,0,x14,f10,-0x800,140,flh,0,x17)
RVTEST_VALBASEUPD(x16)

inst_18:// rs1==x5, rd==f22, 
// opcode:flh op1:x5; dest:f22; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x15,x18,0,x5,f22,-0x800,150,flh,0,x17)
RVTEST_VALBASEUPD(x16)

inst_19:// rs1==x23, rd==f8, 
// opcode:flh op1:x23; dest:f8; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x15,x18,0,x23,f8,-0x800,160,flh,0,x17)
RVTEST_VALBASEUPD(x16)

inst_20:// rs1==x20, rd==f11, 
// opcode:flh op1:x20; dest:f11; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x15,x18,0,x20,f11,-0x800,170,flh,0,x17)
RVTEST_VALBASEUPD(x16)

inst_21:// rs1==x12, rd==f25, 
// opcode:flh op1:x12; dest:f25; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x15,x18,0,x12,f25,-0x800,180,flh,0,x17)
RVTEST_VALBASEUPD(x16)

inst_22:// rs1==x6, rd==f18, 
// opcode:flh op1:x6; dest:f18; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x15,x18,0,x6,f18,-0x800,190,flh,0,x17)
RVTEST_VALBASEUPD(x16)

inst_23:// rs1==x2, rd==f4, 
// opcode:flh op1:x2; dest:f4; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x15,x18,0,x2,f4,-0x800,200,flh,0,x17)
RVTEST_VALBASEUPD(x16)

inst_24:// rs1==x24, rd==f0, 
// opcode:flh op1:x24; dest:f0; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x15,x18,0,x24,f0,-0x800,210,flh,0,x17)
RVTEST_VALBASEUPD(x16)
RVTEST_VALBASEMOV(x20, x16)
RVTEST_SIGBASE(x19,signature_x19_1)

inst_25:// rs1==x16, rd==f21, 
// opcode:flh op1:x16; dest:f21; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x19,x18,0,x16,f21,-0x800,0,flh,0,x21)
RVTEST_VALBASEUPD(x20)
RVTEST_VALBASEMOV(x16, x20)
RVTEST_SIGBASE(x15,signature_x15_3)

inst_26:// rs1==x28, rd==f2, 
// opcode:flh op1:x28; dest:f2; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x15,x18,0,x28,f2,-0x800,0,flh,0,x17)
RVTEST_VALBASEUPD(x16)
RVTEST_VALBASEMOV(x20, x16)
RVTEST_SIGBASE(x19,signature_x19_2)

inst_27:// rs1==x15, rd==f28, 
// opcode:flh op1:x15; dest:f28; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x19,x18,0,x15,f28,-0x800,0,flh,0,x21)
RVTEST_VALBASEUPD(x20)
RVTEST_VALBASEMOV(x16, x20)
RVTEST_SIGBASE(x15,signature_x15_4)

inst_28:// rs1==x9, rd==f20, 
// opcode:flh op1:x9; dest:f20; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x15,x18,0,x9,f20,-0x800,0,flh,0,x17)
RVTEST_VALBASEUPD(x16)

inst_29:// rs1==x1, rd==f9, 
// opcode:flh op1:x1; dest:f9; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x15,x18,0,x1,f9,-0x800,10,flh,0,x17)
RVTEST_VALBASEUPD(x16)

inst_30:// rs1==x3, rd==f17, 
// opcode:flh op1:x3; dest:f17; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x15,x18,0,x3,f17,-0x800,20,flh,0,x17)
RVTEST_VALBASEUPD(x16)

inst_31:// rd==f19, 
// opcode:flh op1:x14; dest:f19; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x15,x18,0,x14,f19,-0x800,30,flh,0,x17)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_fp:
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 4*(XLEN/32),4,0xdeadbeef


signature_x19_0:
    .fill 2*(XLEN/32),4,0xdeadbeef


signature_x15_2:
    .fill 44*(XLEN/32),4,0xdeadbeef


signature_x19_1:
    .fill 2*(XLEN/32),4,0xdeadbeef


signature_x15_3:
    .fill 2*(XLEN/32),4,0xdeadbeef


signature_x19_2:
    .fill 2*(XLEN/32),4,0xdeadbeef


signature_x15_4:
    .fill 8*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
